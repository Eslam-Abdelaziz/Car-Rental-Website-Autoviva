// <auto-generated />
using System;
using CarRental.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707230719_All")]
    partial class All
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.Data.Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .IsUnique()
                        .HasFilter("[BranchId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            City = "El Nozha",
                            Phone = "01020304050",
                            State = "Cairo Governorate",
                            Street = "Oruba Rd",
                            UserId = "408aa945-3d84-4421-8541-7269ec64d938",
                            ZipCode = 11776
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            City = "Borg El Arab",
                            Phone = "01020304050",
                            State = "Alexandria Governorate",
                            Street = "Airport Road",
                            UserId = "508aa945-3d84-4421-8541-7269ec64d938",
                            ZipCode = 21934
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 3,
                            City = "6 Octobar",
                            Phone = "01020304050",
                            State = "Giza Governorate",
                            Street = "Wahat Road",
                            UserId = "608aa945-3d84-4421-8541-7269ec64d938",
                            ZipCode = 12566
                        });
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cairo International Airport"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Borg El Arab International Airport"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mall of Arabia"
                        });
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mitsubishi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chery"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Geely"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Peugeot"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Fiat"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Skoda"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Suzuki"
                        });
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DailyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("FindexScore")
                        .HasColumnType("float");

                    b.Property<double>("FuelUsage")
                        .HasColumnType("float");

                    b.Property<bool>("IsAutomatic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElectric")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastFindexScore")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beige"
                        });
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Favourite", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripePayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 55005874L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ResetPasswordExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "408aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d9d8fd6-87af-468a-a5d2-307cac9927f6",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIoJyQWRTr91jmu363u3FQuN2T4Th27aH1O2oFTtGbqluT29U2g35fRnT4EsfqTR8w==",
                            PhoneNumberConfirmed = false,
                            ResetPasswordExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "55e92bd8-fd91-4352-b42c-257663b1811a",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "408aa945-3d84-4421-8541-7269ec64d938",
                            AccessFailedCount = 0,
                            BranchId = 1,
                            ConcurrencyStamp = "120356ac-2ff3-4f54-8d7c-07d2069ec6e5",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carioairport@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Cairo Airport",
                            Lastname = "Branch",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARIOAIRPORT@LOCALHOST.COM",
                            NormalizedUserName = "CARIOAIRPORT@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRH1x/Ao7+UJiwic3keWG3ulKZ9Y3wR8CIHBuqa6MH8LFxm2BNdLlbyDyTY0oma4g==",
                            PhoneNumberConfirmed = false,
                            ResetPasswordExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "67a25819-9ad3-47c9-886c-b4fc2d546b96",
                            TwoFactorEnabled = false,
                            UserName = "carioairport@localhost.com"
                        },
                        new
                        {
                            Id = "508aa945-3d84-4421-8541-7269ec64d938",
                            AccessFailedCount = 0,
                            BranchId = 2,
                            ConcurrencyStamp = "1b69407f-3cb0-4ced-a177-b3bf3f1342f2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "borgelarabairport@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Borg El Arab Airport",
                            Lastname = "Branch",
                            LockoutEnabled = false,
                            NormalizedEmail = "BORGELARABAIRPORT@LOCALHOST.COM",
                            NormalizedUserName = "BORGELARABAIRPORT@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBW4bplOo0X8Pqx48ivehXpHj/AUUlrhLykvQCUSs0Qa/wz+tsltQQKA7kAHX6ti/Q==",
                            PhoneNumberConfirmed = false,
                            ResetPasswordExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c1c5a1d9-3b5d-4b30-bbc9-1014c073178a",
                            TwoFactorEnabled = false,
                            UserName = "borgelarabairport@localhost.com"
                        },
                        new
                        {
                            Id = "608aa945-3d84-4421-8541-7269ec64d938",
                            AccessFailedCount = 0,
                            BranchId = 3,
                            ConcurrencyStamp = "8b1c9092-2580-4c6d-b091-5c31b289d47b",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mallofarabia@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Mall of Arabia",
                            Lastname = "Branch",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALLOFARABIA@LOCALHOST.COM",
                            NormalizedUserName = "MALLOFARABIA@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHW9Fse0D9Ns4B8tSiIWIcxxIcebipZWfAU4Y9QnhaTRFCPu+Y3Yo2bvCManc84cIg==",
                            PhoneNumberConfirmed = false,
                            ResetPasswordExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "f9cb334c-8266-4eb7-bf6d-a0cc7e838a70",
                            TwoFactorEnabled = false,
                            UserName = "mallofarabia@localhost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "8256f7f6-4b34-4373-9dd8-d92e7a55ea10",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cac43a7e-f7cb-4148-baaf-1acb431eabbf",
                            ConcurrencyStamp = "cf7563d9-9b6a-4f8b-9248-9b8a46eab3a4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "cac43a7e-f7cb-4148-baaf-1ab4435eacbf",
                            ConcurrencyStamp = "9f0dbdd2-6499-4847-a944-d069869c6f41",
                            Name = "Branch",
                            NormalizedName = "BRANCH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "408aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "408aa945-3d84-4421-8541-7269ec64d938",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1ab4435eacbf"
                        },
                        new
                        {
                            UserId = "508aa945-3d84-4421-8541-7269ec64d938",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1ab4435eacbf"
                        },
                        new
                        {
                            UserId = "608aa945-3d84-4421-8541-7269ec64d938",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1ab4435eacbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Address", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Branch", "Branch")
                        .WithOne("Address")
                        .HasForeignKey("CarRental.Data.Models.Entities.Address", "BranchId");

                    b.HasOne("CarRental.Data.Models.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("CarRental.Data.Models.Entities.Address", "UserId");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Car", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Branch", "Branch")
                        .WithMany("Cars")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.CarImage", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Favourite", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Model", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Payment", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Rental", "Rental")
                        .WithOne("Payment")
                        .HasForeignKey("CarRental.Data.Models.Entities.Payment", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Rental", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Branch", "ReturnBranch")
                        .WithMany("Rentals")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("ReturnBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.User", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRental.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Branch", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("Rentals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Brand", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Car", b =>
                {
                    b.Navigation("CarImages");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.Rental", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Data.Models.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Favourites");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
